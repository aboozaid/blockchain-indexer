//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package tables

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var CryptoCurrencies = newCryptoCurrenciesTable("", "crypto_currencies", "CryptoCurrency")

type cryptoCurrenciesTable struct {
	sqlite.Table

	// Columns
	ChainID         sqlite.ColumnInteger
	ContractAddress sqlite.ColumnString
	Symbol          sqlite.ColumnString
	Decimals        sqlite.ColumnInteger
	CreatedAt       sqlite.ColumnInteger
	UpdatedAt       sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type CryptoCurrenciesTable struct {
	cryptoCurrenciesTable

	EXCLUDED cryptoCurrenciesTable
}

// AS creates new CryptoCurrenciesTable with assigned alias
func (a CryptoCurrenciesTable) AS(alias string) *CryptoCurrenciesTable {
	return newCryptoCurrenciesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CryptoCurrenciesTable with assigned schema name
func (a CryptoCurrenciesTable) FromSchema(schemaName string) *CryptoCurrenciesTable {
	return newCryptoCurrenciesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CryptoCurrenciesTable with assigned table prefix
func (a CryptoCurrenciesTable) WithPrefix(prefix string) *CryptoCurrenciesTable {
	return newCryptoCurrenciesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CryptoCurrenciesTable with assigned table suffix
func (a CryptoCurrenciesTable) WithSuffix(suffix string) *CryptoCurrenciesTable {
	return newCryptoCurrenciesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCryptoCurrenciesTable(schemaName, tableName, alias string) *CryptoCurrenciesTable {
	return &CryptoCurrenciesTable{
		cryptoCurrenciesTable: newCryptoCurrenciesTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newCryptoCurrenciesTableImpl("", "excluded", ""),
	}
}

func newCryptoCurrenciesTableImpl(schemaName, tableName, alias string) cryptoCurrenciesTable {
	var (
		ChainIDColumn         = sqlite.IntegerColumn("chain_id")
		ContractAddressColumn = sqlite.StringColumn("contract_address")
		SymbolColumn          = sqlite.StringColumn("symbol")
		DecimalsColumn        = sqlite.IntegerColumn("decimals")
		CreatedAtColumn       = sqlite.IntegerColumn("created_at")
		UpdatedAtColumn       = sqlite.IntegerColumn("updated_at")
		allColumns            = sqlite.ColumnList{ChainIDColumn, ContractAddressColumn, SymbolColumn, DecimalsColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns        = sqlite.ColumnList{ChainIDColumn, ContractAddressColumn, SymbolColumn, DecimalsColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns        = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return cryptoCurrenciesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ChainID:         ChainIDColumn,
		ContractAddress: ContractAddressColumn,
		Symbol:          SymbolColumn,
		Decimals:        DecimalsColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
