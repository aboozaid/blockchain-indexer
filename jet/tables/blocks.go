//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package tables

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Blocks = newBlocksTable("", "blocks", "Block")

type blocksTable struct {
	sqlite.Table

	// Columns
	ChainID         sqlite.ColumnInteger
	BlockNumber     sqlite.ColumnString
	BlockHash       sqlite.ColumnString
	BlockParentHash sqlite.ColumnString
	BlockConfirmed  sqlite.ColumnInteger
	CreatedAt       sqlite.ColumnInteger
	UpdatedAt       sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type BlocksTable struct {
	blocksTable

	EXCLUDED blocksTable
}

// AS creates new BlocksTable with assigned alias
func (a BlocksTable) AS(alias string) *BlocksTable {
	return newBlocksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BlocksTable with assigned schema name
func (a BlocksTable) FromSchema(schemaName string) *BlocksTable {
	return newBlocksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BlocksTable with assigned table prefix
func (a BlocksTable) WithPrefix(prefix string) *BlocksTable {
	return newBlocksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BlocksTable with assigned table suffix
func (a BlocksTable) WithSuffix(suffix string) *BlocksTable {
	return newBlocksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBlocksTable(schemaName, tableName, alias string) *BlocksTable {
	return &BlocksTable{
		blocksTable: newBlocksTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newBlocksTableImpl("", "excluded", ""),
	}
}

func newBlocksTableImpl(schemaName, tableName, alias string) blocksTable {
	var (
		ChainIDColumn         = sqlite.IntegerColumn("chain_id")
		BlockNumberColumn     = sqlite.StringColumn("block_number")
		BlockHashColumn       = sqlite.StringColumn("block_hash")
		BlockParentHashColumn = sqlite.StringColumn("block_parent_hash")
		BlockConfirmedColumn  = sqlite.IntegerColumn("block_confirmed")
		CreatedAtColumn       = sqlite.IntegerColumn("created_at")
		UpdatedAtColumn       = sqlite.IntegerColumn("updated_at")
		allColumns            = sqlite.ColumnList{ChainIDColumn, BlockNumberColumn, BlockHashColumn, BlockParentHashColumn, BlockConfirmedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns        = sqlite.ColumnList{ChainIDColumn, BlockNumberColumn, BlockHashColumn, BlockParentHashColumn, BlockConfirmedColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns        = sqlite.ColumnList{BlockConfirmedColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return blocksTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ChainID:         ChainIDColumn,
		BlockNumber:     BlockNumberColumn,
		BlockHash:       BlockHashColumn,
		BlockParentHash: BlockParentHashColumn,
		BlockConfirmed:  BlockConfirmedColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
