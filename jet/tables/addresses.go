//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package tables

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Addresses = newAddressesTable("", "addresses", "Address")

type addressesTable struct {
	sqlite.Table

	// Columns
	ChainID   sqlite.ColumnInteger
	Address   sqlite.ColumnString
	CreatedAt sqlite.ColumnInteger
	UpdatedAt sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type AddressesTable struct {
	addressesTable

	EXCLUDED addressesTable
}

// AS creates new AddressesTable with assigned alias
func (a AddressesTable) AS(alias string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AddressesTable with assigned schema name
func (a AddressesTable) FromSchema(schemaName string) *AddressesTable {
	return newAddressesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AddressesTable with assigned table prefix
func (a AddressesTable) WithPrefix(prefix string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AddressesTable with assigned table suffix
func (a AddressesTable) WithSuffix(suffix string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAddressesTable(schemaName, tableName, alias string) *AddressesTable {
	return &AddressesTable{
		addressesTable: newAddressesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAddressesTableImpl("", "excluded", ""),
	}
}

func newAddressesTableImpl(schemaName, tableName, alias string) addressesTable {
	var (
		ChainIDColumn   = sqlite.IntegerColumn("chain_id")
		AddressColumn   = sqlite.StringColumn("address")
		CreatedAtColumn = sqlite.IntegerColumn("created_at")
		UpdatedAtColumn = sqlite.IntegerColumn("updated_at")
		allColumns      = sqlite.ColumnList{ChainIDColumn, AddressColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{ChainIDColumn, AddressColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return addressesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ChainID:   ChainIDColumn,
		Address:   AddressColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
